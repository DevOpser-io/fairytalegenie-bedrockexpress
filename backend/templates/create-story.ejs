<% title = 'Create Your Fairytale' %>
<%- include('./partials/favicon') %>

<style nonce="<%= cspNonce %>">
  /* Story History Sidebar Styles */
  .story-sidebar {
    position: fixed;
    top: 0;
    left: -320px;
    width: 320px;
    height: 100vh;
    background: white;
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    transition: left 0.3s ease;
    z-index: 1000;
    overflow-y: auto;
  }
  
  .story-sidebar.active {
    left: 0;
  }
  
  .sidebar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 999;
  }
  
  .sidebar-overlay.active {
    opacity: 1;
    visibility: visible;
  }
  
  .sidebar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid #e2e8f0;
    background: #667eea;
    color: white;
  }
  
  .sidebar-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }
  
  .sidebar-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 5px;
    line-height: 1;
  }
  
  .sidebar-content {
    padding: 20px;
  }
  
  .story-group {
    margin-bottom: 30px;
  }
  
  .story-group-header {
    font-size: 0.875rem;
    font-weight: 600;
    color: #718096;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 12px;
  }
  
  .story-item {
    display: block;
    padding: 12px 16px;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
    margin-bottom: 8px;
    text-decoration: none;
    color: #2d3748;
    background: white;
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .story-item:hover {
    background: #f7fafc;
    border-color: #667eea;
    transform: translateX(2px);
  }
  
  .story-title {
    font-weight: 600;
    font-size: 0.95rem;
    margin-bottom: 4px;
    color: #2d3748;
  }
  
  .story-meta {
    font-size: 0.75rem;
    color: #718096;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .story-style-badge {
    background: #e2e8f0;
    color: #4a5568;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 0.7rem;
    text-transform: capitalize;
  }
  
  .story-style-badge.rhyme {
    background: #fef5e7;
    color: #c05621;
  }
  
  .sidebar-toggle {
    position: fixed;
    top: 20px;
    left: 20px;
    background: #667eea;
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 16px;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    transition: all 0.2s ease;
    z-index: 1001;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 0.9rem;
  }
  
  .sidebar-toggle:hover {
    background: #5a67d8;
    transform: translateY(-1px);
  }
  
  .empty-state {
    text-align: center;
    padding: 40px 20px;
    color: #718096;
  }
  
  .empty-state-icon {
    font-size: 3rem;
    margin-bottom: 16px;
    opacity: 0.5;
  }
  
  @media (max-width: 768px) {
    .story-sidebar {
      width: 280px;
      left: -280px;
    }
    
    .sidebar-toggle {
      top: 15px;
      left: 15px;
      padding: 10px 12px;
      font-size: 0.85rem;
    }
  }
  .story-form-container {
    max-width: 600px;
    margin: 40px auto;
    padding: 30px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .story-form-container h1 {
    text-align: center;
    color: #667eea;
    margin-bottom: 10px;
    font-size: 2.5rem;
  }
  
  .story-form-container .subtitle {
    text-align: center;
    color: #718096;
    margin-bottom: 30px;
    font-size: 1.1rem;
  }
  
  .form-group {
    margin-bottom: 24px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #2d3748;
    font-size: 1rem;
  }
  
  .form-group .helper-text {
    font-size: 0.875rem;
    color: #718096;
    margin-top: 4px;
  }
  
  .form-group input[type="text"],
  .form-group input[type="number"],
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 16px;
    transition: all 0.2s;
    box-sizing: border-box;
  }
  
  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }
  
  .keywords-input-container {
    position: relative;
  }
  
  .keywords-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 12px;
  }
  
  .keyword-tag {
    background: #667eea;
    color: white;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .keyword-tag button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 1.2rem;
    line-height: 1;
    padding: 0;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s;
  }
  
  .keyword-tag button:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  
  .submit-button {
    width: 100%;
    padding: 16px 24px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
  }
  
  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(102, 126, 234, 0.3);
  }
  
  .submit-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }
  
  .error-message {
    background: #fed7d7;
    color: #c53030;
    padding: 12px 16px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-size: 0.875rem;
  }
  
  .loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .progress-container {
    display: none;
    margin-top: 24px;
  }
  
  .progress-bar {
    width: 100%;
    height: 8px;
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
  }
  
  .progress-fill {
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    width: 0%;
    transition: width 0.5s ease;
  }
  
  .progress-text {
    text-align: center;
    margin-top: 12px;
    color: #718096;
    font-size: 0.875rem;
  }
</style>

<!-- Story History Sidebar Toggle Button -->
<button class="sidebar-toggle" id="sidebar-toggle">
  ðŸ“š My Stories
</button>

<!-- Story History Sidebar Overlay -->
<div class="sidebar-overlay" id="sidebar-overlay"></div>

<!-- Story History Sidebar -->
<div class="story-sidebar" id="story-sidebar">
  <div class="sidebar-header">
    <h2 class="sidebar-title">My Stories</h2>
    <button class="sidebar-close" id="sidebar-close">&times;</button>
  </div>
  <div class="sidebar-content" id="sidebar-content">
    <div class="empty-state" id="empty-state">
      <div class="empty-state-icon">ðŸ“–</div>
      <p>No stories yet!</p>
      <small>Create your first magical story</small>
    </div>
  </div>
</div>

<div class="story-form-container">
  <h1>âœ¨ Create Your Fairytale</h1>
  <p class="subtitle">Tell us what you'd like in your story, and we'll create something magical!</p>
  
  <form id="story-form" method="POST" action="/v1/story">
    <div id="error-container"></div>
    
    <div class="form-group">
      <label for="keywords">Story Elements</label>
      <div class="keywords-input-container">
        <div class="keywords-tags" id="keywords-tags"></div>
        <input 
          type="text" 
          id="keywords-input" 
          placeholder="Type an element and press Enter (e.g., dragon, castle, princess)"
          autocomplete="off"
        />
        <p class="helper-text">Add up to 5 elements that should appear in your story</p>
      </div>
    </div>
    
    <div class="form-group">
      <label for="childName">Child's Name</label>
      <input 
        type="text" 
        id="childName" 
        name="childName" 
        placeholder="e.g., Emma"
        required
      />
      <p class="helper-text">The main character will be named after your child</p>
    </div>
    
    <div class="form-group">
      <label for="childGender">Child's Gender (Optional)</label>
      <input 
        type="text" 
        id="childGender" 
        name="childGender" 
        placeholder="Type in your child's gender (optional)"
      />
      <p class="helper-text">This helps create appropriate pronouns and character descriptions</p>
    </div>
    
    <div class="form-group">
      <label for="childCharacteristics">Child's Characteristics (Optional)</label>
      <textarea 
        id="childCharacteristics" 
        name="childCharacteristics" 
        rows="2" 
        maxlength="200"
        placeholder="e.g., brown hair, blue eyes, loves purple, has freckles"
      ></textarea>
      <p class="helper-text">Describe your child's appearance and favorite things (<span id="characteristics-count">0</span>/200 characters)</p>
    </div>
    
    <div class="form-group">
      <label for="age">Child's Age</label>
      <input 
        type="number" 
        id="age" 
        name="age" 
        min="1" 
        max="12" 
        value="6" 
        required
      />
      <p class="helper-text">This helps us create age-appropriate content</p>
    </div>
    
    <div class="form-group">
      <label for="storyStyle">Story Style</label>
      <select id="storyStyle" name="storyStyle" required>
        <option value="">Select style...</option>
        <option value="prose">Story Prose</option>
        <option value="rhyme">Rhyming Verse</option>
      </select>
      <p class="helper-text">Choose between traditional storytelling or fun rhyming verse</p>
    </div>
    
    <div class="form-group">
      <label for="familyNames">Family Names (Optional)</label>
      <input 
        type="text" 
        id="familyNames" 
        name="familyNames" 
        placeholder="e.g., Mom Sarah, Dad Michael, Sister Lucy"
      />
      <p class="helper-text">Add family member names to include in the story (comma-separated)</p>
    </div>
    
    <div class="form-group">
      <label for="notes">Additional Notes (Optional)</label>
      <textarea 
        id="notes" 
        name="notes" 
        rows="3" 
        maxlength="600"
        placeholder="Any special requests? Lessons to include? Favorite things?"
      ></textarea>
      <p class="helper-text"><span id="notes-count">0</span>/600 characters</p>
    </div>
    
    <button type="submit" class="submit-button" id="submit-btn">
      <span>ðŸŽª Create My Story</span>
    </button>
    
    <div class="progress-container" id="progress-container">
      <div class="progress-bar">
        <div class="progress-fill" id="progress-fill"></div>
      </div>
      <p class="progress-text" id="progress-text">Creating your magical story...</p>
    </div>
  </form>
</div>

<script nonce="<%= cspNonce %>">
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('story-form');
  const keywordsInput = document.getElementById('keywords-input');
  const keywordsTags = document.getElementById('keywords-tags');
  const notesInput = document.getElementById('notes');
  const notesCount = document.getElementById('notes-count');
  const submitBtn = document.getElementById('submit-btn');
  const errorContainer = document.getElementById('error-container');
  const progressContainer = document.getElementById('progress-container');
  const progressFill = document.getElementById('progress-fill');
  const progressText = document.getElementById('progress-text');
  
  let keywords = [];
  
  // Keywords management
  function addKeyword(keyword) {
    keyword = keyword.trim();
    if (keyword && !keywords.includes(keyword) && keywords.length < 5) {
      keywords.push(keyword);
      renderKeywords();
      keywordsInput.value = '';
    } else if (keywords.length >= 5) {
      showError('Maximum 5 keywords allowed');
    }
  }
  
  function removeKeyword(index) {
    keywords.splice(index, 1);
    renderKeywords();
  }
  
  function renderKeywords() {
    keywordsTags.innerHTML = keywords.map((keyword, index) => `
      <div class="keyword-tag">
        <span>${keyword}</span>
        <button type="button" class="remove-keyword" data-index="${index}">Ã—</button>
      </div>
    `).join('');
  }
  
  // Handle Enter key for keywords
  keywordsInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      addKeyword(keywordsInput.value);
    }
  });
  
  // Handle comma-separated input
  keywordsInput.addEventListener('input', function(e) {
    if (e.target.value.includes(',')) {
      const parts = e.target.value.split(',');
      parts.forEach(part => {
        if (part.trim()) {
          addKeyword(part);
        }
      });
      keywordsInput.value = '';
    }
  });
  
  // Handle keyword removal using event delegation
  keywordsTags.addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-keyword')) {
      const index = parseInt(e.target.getAttribute('data-index'));
      removeKeyword(index);
    }
  });
  
  
  // Character counter for characteristics
  const characteristicsInput = document.getElementById('childCharacteristics');
  const characteristicsCount = document.getElementById('characteristics-count');
  
  characteristicsInput.addEventListener('input', function() {
    characteristicsCount.textContent = this.value.length;
  });
  
  // Character counter for notes
  notesInput.addEventListener('input', function() {
    notesCount.textContent = this.value.length;
  });
  
  // Show error message
  function showError(message) {
    errorContainer.innerHTML = `<div class="error-message">${message}</div>`;
    setTimeout(() => {
      errorContainer.innerHTML = '';
    }, 5000);
  }
  
  // Form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Validate
    if (keywords.length === 0) {
      showError('Please add at least one story element');
      return;
    }
    
    const childNameInput = document.getElementById('childName');
    const childGenderInput = document.getElementById('childGender');
    const ageInput = document.getElementById('age');
    const storyStyleInput = document.getElementById('storyStyle');
    
    if (!childNameInput.value.trim()) {
      showError('Please enter your child\'s name');
      return;
    }
    
    
    if (!storyStyleInput.value) {
      showError('Please select a story style');
      return;
    }
    
    // Prepare data
    const formData = {
      keywords: keywords,
      childName: childNameInput.value.trim(),
      childGender: childGenderInput.value.trim(),
      childCharacteristics: characteristicsInput.value.trim(),
      age: parseInt(ageInput.value),
      storyStyle: storyStyleInput.value,
      notes: notesInput.value.trim()
    };
    
    // Handle family names
    const familyNamesValue = document.getElementById('familyNames').value.trim();
    if (familyNamesValue) {
      formData.familyNames = familyNamesValue.split(',').map(n => n.trim()).filter(n => n);
    }
    
    // Disable form
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="loading-spinner"></span><span>Creating...</span>';
    progressContainer.style.display = 'block';
    
    // Start progress animation
    let progress = 0;
    const progressInterval = setInterval(() => {
      progress = Math.min(progress + 1, 90);
      progressFill.style.width = progress + '%';
    }, 800);
    
    try {
      // Submit to API
      const response = await fetch('/v1/story', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': '<%= typeof csrfToken !== "undefined" ? csrfToken : "" %>'
        },
        body: JSON.stringify(formData)
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to create story');
      }
      
      // Poll for completion
      progressText.textContent = 'Generating your magical story...';
      const storyId = data.storyId;
      let checkCount = 0;
      const maxChecks = 30; // 90 seconds max
      
      const checkStory = async () => {
        checkCount++;
        
        const storyResponse = await fetch(`/v1/story/${storyId}`);
        const storyData = await storyResponse.json();
        
        if (storyData.status === 'completed') {
          clearInterval(progressInterval);
          progressFill.style.width = '100%';
          progressText.textContent = 'Your story is ready!';
          
          // Redirect to reader view
          setTimeout(() => {
            window.location.href = `/story/${storyId}`;
          }, 1000);
        } else if (storyData.status === 'failed' || checkCount >= maxChecks) {
          throw new Error(storyData.error || 'Story generation timed out');
        } else {
          // Continue polling
          setTimeout(checkStory, 3000);
        }
      };
      
      setTimeout(checkStory, 3000);
      
    } catch (error) {
      clearInterval(progressInterval);
      showError(error.message);
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<span>ðŸŽª Create My Story</span>';
      progressContainer.style.display = 'none';
    }
  });
  
  // Story History Sidebar Functionality
  const sidebarToggle = document.getElementById('sidebar-toggle');
  const sidebarOverlay = document.getElementById('sidebar-overlay');
  const storySidebar = document.getElementById('story-sidebar');
  const sidebarClose = document.getElementById('sidebar-close');
  const sidebarContent = document.getElementById('sidebar-content');
  const emptyState = document.getElementById('empty-state');

  // Load story history when sidebar is opened
  async function loadStoryHistory() {
    try {
      const response = await fetch('/api/stories');
      const data = await response.json();
      
      if (data.success && data.stories) {
        renderStoryHistory(data.stories);
      } else {
        showEmptyState();
      }
    } catch (error) {
      console.error('Failed to load story history:', error);
      showEmptyState();
    }
  }

  function renderStoryHistory(groupedStories) {
    const hasStories = Object.values(groupedStories).some(group => group.length > 0);
    
    if (!hasStories) {
      showEmptyState();
      return;
    }

    let html = '';
    
    // Define groups with labels
    const groups = [
      { key: 'today', label: 'Today' },
      { key: 'week', label: 'Previous 7 Days' },
      { key: 'month', label: 'Previous 30 Days' },
      { key: 'older', label: 'Older' }
    ];

    groups.forEach(group => {
      const stories = groupedStories[group.key];
      if (stories && stories.length > 0) {
        html += `<div class="story-group">`;
        html += `<div class="story-group-header">${group.label}</div>`;
        
        stories.forEach(story => {
          const createdDate = new Date(story.created_at).toLocaleDateString();
          html += `
            <div class="story-item" onclick="openStory('${story.story_id}')">
              <div class="story-title">${escapeHtml(story.title)}</div>
              <div class="story-meta">
                <span>${story.child_name} â€¢ Age ${story.child_age} â€¢ ${createdDate}</span>
                <span class="story-style-badge ${story.story_style}">${story.story_style}</span>
              </div>
            </div>
          `;
        });
        
        html += `</div>`;
      }
    });

    sidebarContent.innerHTML = html;
  }

  function showEmptyState() {
    sidebarContent.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">ðŸ“–</div>
        <p>No stories yet!</p>
        <small>Create your first magical story</small>
      </div>
    `;
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function openStory(storyId) {
    window.location.href = `/story/${storyId}`;
  }

  function toggleSidebar() {
    const isActive = storySidebar.classList.contains('active');
    
    if (isActive) {
      storySidebar.classList.remove('active');
      sidebarOverlay.classList.remove('active');
    } else {
      storySidebar.classList.add('active');
      sidebarOverlay.classList.add('active');
      loadStoryHistory(); // Load stories when opening
    }
  }

  // Event listeners
  sidebarToggle.addEventListener('click', toggleSidebar);
  sidebarClose.addEventListener('click', toggleSidebar);
  sidebarOverlay.addEventListener('click', toggleSidebar);

  // Make openStory global for onclick handlers
  window.openStory = openStory;
});
</script>